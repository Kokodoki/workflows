name: Automated Repository Creation

on:
  issues:
    types: [opened]

env:
  ISSUE_NUMBER: ${{ github.event.issue.number }}

jobs:
  parse-issue:
    permissions:
      issues: write
    runs-on: ubuntu-latest
    outputs:
      repo-name: ${{ steps.set-env.outputs.repo-name }}
      repo-description: ${{ steps.set-env.outputs.repo-description }}
      repo-template: ${{ steps.set-env.outputs.repo-template }}
    steps:
      - name: Add reaction to Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/issues/$ISSUE_NUMBER/reactions \
            -f content='eyes'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse Issue
        id: parser
        uses: issue-ops/parser@v4
        with:
          body: ${{ github.event.issue.body }}
          issue-form-template: create-repository.yml
          workspace: ${{ github.workspace }}

      - name: Set env vars from Issue JSON
        id: set-env
        run: |
          echo '${{ steps.parser.outputs.json }}' > issue.json
          echo "repo-name=$(jq -r .name issue.json)" >> $GITHUB_OUTPUT
          echo "repo-description=$(jq -r .description issue.json)" >> $GITHUB_OUTPUT
          echo "repo-template=$(jq -r '.template[0]' issue.json)" >> $GITHUB_OUTPUT

  create-repository:
    needs: parse-issue
    environment:
      name: Setup Repository
    runs-on: ubuntu-latest
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ needs.parse-issue.outputs.repo-name }}
      REPO_DESCRIPTION: ${{ needs.parse-issue.outputs.repo-description }}
      REPO_TEMPLATE: ${{ needs.parse-issue.outputs.repo-template }}
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4

      - name: Get Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID_SETUP_REPO }}
          private-key: ${{ secrets.APP_PRIVATE_KEY_SETUP_REPO }}
          owner: ${{ github.repository_owner }}

      - name: Create Repository
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh repo create "$REPO_OWNER/$REPO_NAME" --public --description "$REPO_DESCRIPTION" --template "$REPO_TEMPLATE"

  setup-repository:
    needs: 
      - parse-issue
      - create-repository
    runs-on: ubuntu-latest
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ needs.parse-issue.outputs.repo-name }}
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4

      - name: Get Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID_SETUP_REPO }}
          private-key: ${{ secrets.APP_PRIVATE_KEY_SETUP_REPO }}
          owner: ${{ github.repository_owner }}

      - name: Add Topics
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh repo edit "$REPO_OWNER/$REPO_NAME" --delete-branch-on-merge
          case "${{ needs.parse-issue.outputs.repo-template }}" in
              "terraform-aws-module")
                  gh repo edit "$REPO_OWNER/$REPO_NAME" --add-topic terraform --add-topic iac
                  ;;
              "spring-boot-ms")
                  gh repo edit "$REPO_OWNER/$REPO_NAME" --add-topic micro
                  ;;
              *)
                  echo "Selecciona un repositorio valido"
                  ;;
          esac

      - name: Add Repository to Team
        id: permission
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          TEAM: devops
        run: |
          gh api \
          --method PUT \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /orgs/$REPO_OWNER/teams/$TEAM/repos/$REPO_OWNER/$REPO_NAME \
          -f "permission=push"

      - name: Set Custom Properties
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$REPO_OWNER/$REPO_NAME/properties/values \
            -f "properties[][property_name]=ownership" -f "properties[][value]=Kokodoki"

  report-status:
    if: always()
    permissions:
      issues: write
    needs:
      - parse-issue
      - create-repository
      - setup-repository
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CREATE_REPO_STATUS: ${{ needs.create-repository.result }}
      SETUP_REPO_STATUS: ${{ needs.setup-repository.result }}
      REPO_NAME: ${{ needs.parse-issue.outputs.repo-name }}
      REPO_OWNER: ${{ github.repository_owner }}
    steps:
      - name: Report Status
        run: |
          MSG="### üì¢ Reporte\n\n"
          MSG+="- Creaci√≥n del repositorio: **$CREATE_REPO_STATUS**\n"
          MSG+="- Configuraci√≥n del repositorio: **$SETUP_REPO_STATUS**\n\n"
          if [ "$CREATE_REPO_STATUS" = "success" ] && [ "$SETUP_REPO_STATUS" = "success" ]; then
            REPO_URL="https://github.com/$REPO_OWNER/$REPO_NAME"
            MSG+="#### ‚úÖ El workflow finaliz√≥ correctamente y el repositorio fue creado/configurado.\n\n"
            MSG+="#### üîó Repositorio: $REPO_URL\n"
          else
            MSG+="### ‚ùå El workflow fall√≥. Por favor revisa los logs para m√°s detalles.\n"
          fi
          gh issue comment "$ISSUE_NUMBER" --repo "${{ github.repository }}" --body "$(echo -e $MSG)"

      - name: Close Issue
        run: |
          gh issue close "$ISSUE_NUMBER" --repo "${{ github.repository }}" --reason completed
